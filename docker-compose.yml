# Ternary Moral Logic (TML) Framework - Docker Compose
# Author: Lev Goukassian (ORCID: 0009-0006-5966-1243)
# Sacred Zero Technology for Ethical AI Decision-Making
#
# One-command setup for academic reviewers and researchers:
# docker compose up --build
#
# This provides a complete TML environment with:
# - Interactive framework testing
# - Jupyter notebooks for exploration
# - Volume mounting for persistent data
# - All examples and demos ready to run

version: '3.8'

services:
  # Main TML Framework Service
  tml-framework:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tml-framework-main
    image: tml-framework:latest
    
    # Environment configuration
    environment:
      - TML_ENV=docker-compose
      - TML_LOG_LEVEL=INFO
      - TML_SACRED_PAUSE_DURATION=2000
      - TML_COMPLEXITY_THRESHOLD=0.7
      - TML_ETHICS_MODE=strict
      - TML_MEMORIAL_ATTRIBUTION=enabled
      - PYTHONPATH=/app
    
    # Volume mounts for persistent data and easy file access
    volumes:
      - ./data:/app/data                    # Mount local data directory
      - ./output:/app/output                # Mount output directory
      - ./logs:/app/logs                    # Mount logs directory
      - tml-cache:/app/.cache               # Named volume for cache
    
    # Port mapping for potential web interfaces
    ports:
      - "8080:8080"                         # Main application port
      - "8888:8888"                         # Jupyter notebook port
    
    # Interactive terminal access
    stdin_open: true
    tty: true
    
    # Resource limits (reasonable for most systems)
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.append('/app'); print('TML Health: OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Network configuration
    networks:
      - tml-network
    
    # Command override for interactive exploration
    command: >
      bash -c "
        echo 'ðŸŽ¯ Ternary Moral Logic (TML) Framework - Docker Compose Setup';
        echo '==============================================================';
        echo '';
        echo 'ðŸ“š Created by: Lev Goukassian (ORCID: 0009-0006-5966-1243)';
        echo 'ðŸ“§ Contact: leogouk@gmail.com';
        echo 'ðŸ”— Repository: https://github.com/FractonicMind/TernaryMoralLogic';
        echo '';
        echo '\"The sacred pause between question and answerâ€”this is where';
        echo 'wisdom begins, for humans and machines alike.\" â€” Lev Goukassian';
        echo '';
        echo 'ðŸš€ Quick Start Commands:';
        echo '  docker compose exec tml-framework python tests/isolated_test.py';
        echo '  docker compose exec tml-framework python examples/medical_ai_triage.py';
        echo '  docker compose exec tml-framework python examples/autonomous_vehicle.py';
        echo '  docker compose exec tml-framework python examples/content_moderation.py';
        echo '  docker compose exec tml-framework python examples/financial_ai.py';
        echo '';
        echo 'ðŸ§ª Testing Commands:';
        echo '  docker compose exec tml-framework pytest tests/ -v';
        echo '  docker compose exec tml-framework python -m pytest tests/test_tml_core.py';
        echo '';
        echo 'ðŸ““ Jupyter Access:';
        echo '  docker compose exec tml-framework jupyter notebook --ip=0.0.0.0 --no-browser';
        echo '  Then visit: http://localhost:8888';
        echo '';
        echo 'ðŸ’» Interactive Shell:';
        echo '  docker compose exec tml-framework bash';
        echo '';
        echo 'âš¡ Framework is ready! Use the commands above to explore TML.';
        echo '';
        tail -f /dev/null
      "

  # Jupyter Service (Optional - for notebook exploration)
  tml-jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tml-jupyter
    image: tml-framework:latest
    
    environment:
      - TML_ENV=jupyter
      - TML_LOG_LEVEL=INFO
      - PYTHONPATH=/app
    
    volumes:
      - ./data:/app/data
      - ./output:/app/output
      - ./notebooks:/app/notebooks           # Mount notebooks directory
      - tml-cache:/app/.cache
    
    ports:
      - "8889:8888"                           # Alternative Jupyter port
    
    networks:
      - tml-network
    
    command: >
      bash -c "
        echo 'ðŸ““ Starting TML Jupyter Notebook Server...';
        echo 'Access at: http://localhost:8889';
        echo 'Token will be displayed below:';
        echo '';
        mkdir -p /app/notebooks;
        cd /app;
        jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root
      "
    
    # Only start if explicitly requested
    profiles:
      - jupyter

  # Documentation Service (Optional)
  tml-docs:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tml-docs
    image: tml-framework:latest
    
    environment:
      - TML_ENV=docs
      - PYTHONPATH=/app
    
    volumes:
      - ./docs:/app/docs
      - ./output:/app/output
    
    ports:
      - "8000:8000"                           # Documentation server port
    
    networks:
      - tml-network
    
    working_dir: /app/docs
    
    command: >
      bash -c "
        echo 'ðŸ“– Starting TML Documentation Server...';
        echo 'Access at: http://localhost:8000';
        echo '';
        mkdocs serve -a 0.0.0.0:8000
      "
    
    # Only start if explicitly requested
    profiles:
      - docs

# Named volumes for persistent data
volumes:
  tml-cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.docker-cache

# Custom network for TML services
networks:
  tml-network:
    driver: bridge
    name: tml-network

# Additional configuration
x-common-variables: &common-variables
  TML_MEMORIAL_CONTACT: "leogouk@gmail.com"
  TML_FRAMEWORK_VERSION: "1.0.0"
  TML_SACRED_PAUSE_ENABLED: "true"
  TML_ETHICAL_AUTHENTICATION: "required"
