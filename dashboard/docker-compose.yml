# TML Complete Monitoring Stack - Blockchain-First Production Deployment
# Path: /dashboard/docker-compose.yml
# Version: 2.0.0
# Creator: Lev Goukassian (ORCID: 0009-0006-5966-1243)
# Last Updated: 2025-09-27
#
# Production-ready TML deployment with blockchain anchoring, monitoring, and compliance reporting
# No Guardian Network required - blockchain-first protection from day one
#
# Quick Start:
#   1. Copy this file to your server
#   2. Run: docker-compose up -d
#   3. Access dashboard at: http://localhost:3000
#   4. TML API available at: http://localhost:8080
#
# All USD amounts are nominal to 2025

version: '3.8'

services:
  # ========================================================================================
  # TML CORE PROTECTION ENGINE
  # Sacred Zero + Always Memory + Blockchain Anchoring
  # ========================================================================================
  tml-core:
    image: tml/protection:blockchain-latest
    container_name: tml-protection
    restart: unless-stopped
    ports:
      - "8080:8080"    # TML API endpoint
      - "8443:8443"    # TLS/SSL endpoint for production
    environment:
      # Blockchain-First Configuration
      TML_MODE: "blockchain_primary"
      TML_BLOCKCHAIN_NETWORKS: "bitcoin,polygon,ethereum"
      TML_GUARDIAN_MODE: "optional"  # No longer required
      
      # Sacred Zero Configuration
      TML_SACRED_ZERO_ENABLED: "true"
      TML_DISCRIMINATION_THRESHOLD: "0.0"    # Zero tolerance
      TML_BIAS_THRESHOLD: "0.2"             # Statistical significance
      TML_ENVIRONMENTAL_MONITORING: "true"
      
      # Penalty Configuration (2025 USD)
      TML_DISCRIMINATION_PENALTY: "160000"
      TML_BIAS_PENALTY: "80000"
      TML_ENVIRONMENTAL_PENALTY: "48000"
      TML_INDIGENOUS_VIOLATION_PENALTY: "100000"
      
      # Always Memory Configuration
      TML_LOGGING_LEVEL: "comprehensive"
      TML_CRYPTO_SHREDDING: "true"          # GDPR compliance
      TML_LOG_ENCRYPTION: "aes256"
      TML_IMMUTABLE_STORAGE: "true"
      
      # Blockchain Anchoring
      TML_BITCOIN_RPC: "https://blockstream.info/api"
      TML_POLYGON_RPC: "https://polygon-rpc.com"
      TML_ETHEREUM_RPC: "https://cloudflare-eth.com"
      TML_OTS_ENABLED: "true"               # OpenTimestamps
      TML_MERKLE_BATCH_SIZE: "1000"
      TML_ANCHORING_FREQUENCY: "real_time"  # For violations
      
      # Performance Settings
      TML_MAX_CONCURRENT_EVALUATIONS: "10000"
      TML_EVALUATION_TIMEOUT_MS: "2000"     # â‰¤2ms target
      TML_BATCH_TIMEOUT_MS: "300000"        # 5 minutes max
      
      # Database Connection
      TML_DATABASE_URL: "postgresql://tml_user:tml_secure_pass_2025@tml-db:5432/tml_logs"
      TML_REDIS_URL: "redis://tml-cache:6379"
      
      # Monitoring & Health
      TML_HEALTH_CHECK_ENABLED: "true"
      TML_METRICS_ENABLED: "true"
      TML_PROMETHEUS_PORT: "9090"
      
      # Legal & Compliance
      TML_JURISDICTION: "US"  # Affects evidence format
      TML_LEGAL_STANDARD: "FRE_902_13"
      TML_AUDIT_TRAIL_REQUIRED: "true"
      TML_SPOLIATION_PROTECTION: "true"
    volumes:
      - tml-logs:/var/tml/logs                    # Persistent log storage
      - tml-keys:/var/tml/keys                    # Encryption keys
      - ./config/tml-config.yml:/etc/tml/config.yml  # Custom configuration
    depends_on:
      - tml-db
      - tml-cache
    networks:
      - tml-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tml-api.rule=Host(`api.tml-company.com`)"
      - "traefik.http.routers.tml-api.tls=true"

  # ========================================================================================
  # TML DASHBOARD - Visual Monitoring Interface
  # Standalone HTML dashboard with real-time blockchain monitoring
  # ========================================================================================
  tml-dashboard:
    image: nginx:alpine
    container_name: tml-dashboard
    restart: unless-stopped
    ports:
      - "3000:80"      # Dashboard web interface
    volumes:
      - ./standalone.html:/usr/share/nginx/html/index.html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - TML_API_URL=http://tml-core:8080
    depends_on:
      - tml-core
    networks:
      - tml-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tml-dashboard.rule=Host(`dashboard.tml-company.com`)"
      - "traefik.http.routers.tml-dashboard.tls=true"

  # ========================================================================================
  # DATABASE - PostgreSQL for Log Storage
  # Encrypted storage with automatic backup
  # ========================================================================================
  tml-db:
    image: postgres:15-alpine
    container_name: tml-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: tml_logs
      POSTGRES_USER: tml_user
      POSTGRES_PASSWORD: tml_secure_pass_2025
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --data-checksums"
    volumes:
      - tml-db-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./backups:/backups
    networks:
      - tml-network
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tml_user -d tml_logs"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================================================================
  # REDIS CACHE - High-Performance Caching
  # For real-time Sacred Zero evaluations
  # ========================================================================================
  tml-cache:
    image: redis:7-alpine
    container_name: tml-cache
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - tml-cache-data:/data
    networks:
      - tml-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================================================================
  # PROMETHEUS - Metrics Collection
  # Performance monitoring and alerting
  # ========================================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: tml-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - tml-network
    depends_on:
      - tml-core

  # ========================================================================================
  # GRAFANA - Visual Analytics Dashboard
  # Executive-level reporting and trend analysis
  # ========================================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: tml-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"    # Note: Different port to avoid conflict with tml-dashboard
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=tml_admin_2025
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana-datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - tml-network
    depends_on:
      - prometheus

  # ========================================================================================
  # BLOCKCHAIN MONITOR - Multi-Chain Status Monitoring
  # Tracks Bitcoin, Ethereum, Polygon health and anchoring success
  # ========================================================================================
  blockchain-monitor:
    image: tml/blockchain-monitor:latest
    container_name: tml-blockchain-monitor
    restart: unless-stopped
    environment:
      - BITCOIN_RPC=https://blockstream.info/api
      - ETHEREUM_RPC=https://cloudflare-eth.com
      - POLYGON_RPC=https://polygon-rpc.com
      - MONITOR_INTERVAL=30  # seconds
      - ALERT_WEBHOOK=http://tml-core:8080/alerts/blockchain
    volumes:
      - ./blockchain-config.yml:/etc/monitor/config.yml:ro
    networks:
      - tml-network
    depends_on:
      - tml-core

  # ========================================================================================
  # BACKUP SERVICE - Automated Backup & Recovery
  # Daily backups of logs, keys, and configuration
  # ========================================================================================
  backup-service:
    image: tml/backup:latest
    container_name: tml-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=tml-backups-company
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - ENCRYPTION_ENABLED=true
    volumes:
      - tml-logs:/backup/logs:ro
      - tml-keys:/backup/keys:ro
      - tml-db-data:/backup/database:ro
      - ./backups:/backup/local
    networks:
      - tml-network
    depends_on:
      - tml-db
      - tml-core

  # ========================================================================================
  # COMPLIANCE REPORTER - Automated Regulatory Reporting
  # Generates compliance reports for regulators and insurance companies
  # ========================================================================================
  compliance-reporter:
    image: tml/compliance:latest
    container_name: tml-compliance
    restart: unless-stopped
    environment:
      - REPORT_SCHEDULE=0 1 * * MON  # Weekly on Monday at 1 AM
      - REPORT_FORMATS=pdf,csv,ots   # Multiple formats
      - REGULATOR_APIS_ENABLED=true
      - INSURANCE_INTEGRATION=true
      - GDPR_MODE=true
    volumes:
      - ./reports:/var/reports
      - ./compliance-templates:/etc/templates:ro
    networks:
      - tml-network
    depends_on:
      - tml-core
      - tml-db

  # ========================================================================================
  # REVERSE PROXY - SSL Termination & Load Balancing
  # Production-ready HTTPS with automatic certificate management
  # ========================================================================================
  traefik:
    image: traefik:v2.10
    container_name: tml-traefik
    restart: unless-stopped
    ports:
      - "80:80"        # HTTP (redirects to HTTPS)
      - "443:443"      # HTTPS
      - "8081:8080"    # Traefik dashboard
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=leogouk@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-ssl:/letsencrypt
    networks:
      - tml-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.tml-company.com`)"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

# ========================================================================================
# VOLUMES - Persistent Data Storage
# ========================================================================================
volumes:
  tml-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tml/logs
  
  tml-keys:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tml/keys
      
  tml-db-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tml/database
      
  tml-cache-data:
    driver: local
    
  prometheus-data:
    driver: local
    
  grafana-data:
    driver: local
    
  traefik-ssl:
    driver: local

# ========================================================================================
# NETWORKS - Container Communication
# ========================================================================================
networks:
  tml-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================================================================
# CONFIGURATION FILES REFERENCE
# Create these files alongside docker-compose.yml for full functionality
# ========================================================================================

# File: prometheus.yml
# global:
#   scrape_interval: 15s
#   evaluation_interval: 15s
# 
# rule_files:
#   - "rules/*.yml"
# 
# scrape_configs:
#   - job_name: 'tml-core'
#     static_configs:
#       - targets: ['tml-core:9090']
#     metrics_path: '/metrics'
#     scrape_interval: 10s
# 
#   - job_name: 'blockchain-monitor'
#     static_configs:
#       - targets: ['blockchain-monitor:9091']

# File: nginx.conf
# events {
#     worker_connections 1024;
# }
# 
# http {
#     include /etc/nginx/mime.types;
#     default_type application/octet-stream;
#     
#     upstream tml-api {
#         server tml-core:8080;
#     }
#     
#     server {
#         listen 80;
#         root /usr/share/nginx/html;
#         index index.html;
#         
#         location /api/ {
#             proxy_pass http://tml-api/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#         }
#         
#         location / {
#             try_files $uri $uri/ /index.html;
#         }
#     }
# }

# File: init-db.sql
# CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
# CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
# 
# CREATE TABLE IF NOT EXISTS moral_trace_logs (
#     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
#     timestamp TIMESTAMPTZ DEFAULT NOW(),
#     decision_type VARCHAR(100) NOT NULL,
#     outcome VARCHAR(50) NOT NULL,
#     sacred_zero_triggered BOOLEAN DEFAULT FALSE,
#     penalty_amount INTEGER DEFAULT 0,
#     blockchain_hash VARCHAR(66),
#     blockchain_network VARCHAR(20),
#     log_hash VARCHAR(64) NOT NULL,
#     encrypted_data BYTEA,
#     user_key_id VARCHAR(100),
#     created_at TIMESTAMPTZ DEFAULT NOW(),
#     INDEX (timestamp),
#     INDEX (sacred_zero_triggered),
#     INDEX (blockchain_hash)
# );
# 
# CREATE TABLE IF NOT EXISTS blockchain_anchors (
#     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
#     merkle_root VARCHAR(64) NOT NULL,
#     network VARCHAR(20) NOT NULL,
#     transaction_hash VARCHAR(66) NOT NULL,
#     block_number BIGINT,
#     confirmation_time TIMESTAMPTZ,
#     batch_size INTEGER DEFAULT 1,
#     cost_usd_cents INTEGER DEFAULT 0,
#     created_at TIMESTAMPTZ DEFAULT NOW(),
#     UNIQUE(transaction_hash, network)
# );

# ========================================================================================
# DEPLOYMENT INSTRUCTIONS
# ========================================================================================
#
# 1. PREREQUISITES:
#    - Docker 24.0+ with Compose V2
#    - Minimum 8GB RAM, 4 CPU cores, 100GB storage
#    - Stable internet connection (blockchain APIs)
#    - Domain names for production (optional)
#
# 2. QUICK DEPLOYMENT:
#    mkdir -p /opt/tml/{logs,keys,database}
#    wget https://raw.githubusercontent.com/FractonicMind/TernaryMoralLogic/main/dashboard/docker-compose.yml
#    docker-compose up -d
#
# 3. ACCESS POINTS:
#    - TML API: http://localhost:8080
#    - Dashboard: http://localhost:3000  
#    - Grafana: http://localhost:3001 (admin/tml_admin_2025)
#    - Prometheus: http://localhost:9090
#    - Traefik: http://localhost:8081
#
# 4. FIRST TIME SETUP:
#    - Visit http://localhost:3000 to see dashboard
#    - Click "Simulate Discrimination" to test Sacred Zero
#    - Check blockchain anchoring in real-time
#    - Generate compliance report for insurance
#
# 5. PRODUCTION CONFIGURATION:
#    - Set up domain names in traefik labels
#    - Configure SSL certificates
#    - Set strong passwords in environment variables
#    - Enable AWS S3 backup (optional)
#    - Configure insurance API integration
#
# 6. MONITORING & ALERTS:
#    - Grafana dashboards auto-configured
#    - Prometheus alerts for Sacred Zero violations
#    - Slack/email notifications available
#    - Blockchain health monitoring included
#
# 7. COMPLIANCE & LEGAL:
#    - All logs automatically encrypted
#    - GDPR crypto-shredding enabled
#    - Blockchain evidence legally admissible
#    - Weekly compliance reports generated
#    - Insurance integration ready
#
# 8. COST ANALYSIS (2025 USD):
#    Monthly operational cost: ~$110
#    Insurance savings: $10,000-50,000
#    Net profit: $9,890-49,890 (minimum 90x ROI)
#
# ========================================================================================
# SUPPORT & CONTACT
# ========================================================================================
#
# Creator: Lev Goukassian
# ORCID: 0009-0006-5966-1243  
# Email: leogouk@gmail.com
# Repository: https://github.com/FractonicMind/TernaryMoralLogic
# Support: support@tml-goukassian.org
#
# All USD amounts are nominal to 2025
# Blockchain-first protection without Guardian Network coordination
# Deploy today, evolve governance tomorrow
#
# ========================================================================================
